<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb/"/>
      <url>/posts/3eeb/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> course </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/posts/2a0c/"/>
      <url>/posts/2a0c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-ThirdWeek</title>
      <link href="/posts/5a0/"/>
      <url>/posts/5a0/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-ThirdWeek"><a href="#LeetCode-ThirdWeek" class="headerlink" title="LeetCode-ThirdWeek"></a>LeetCode-ThirdWeek</h1><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="[70]爬楼梯"></a>[70]爬楼梯</h2><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;<span class="comment">//1个台阶一种方法，2个台阶有两种方法</span></span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第n级台阶可以由n-1级台阶上来，也可以由n-2级台阶上来</span></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            ans = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题主要考察的就是思维能力是动态规划吧，在思考的时候不能总是固定着自己的思想，总是想着下一步可以走一步或者两步，一般都会考虑直接递归，但是在这题会导致超时，所以需要重新考虑方法。</p><p>在这题主要的思路就是想清楚考虑好走台阶的真正意思。在这题中我们可以分析发现走第 <code>n</code> 个台阶可以由第 <code>n-1</code>个台阶走上来，也可以由 <code>n-2</code> 个台阶走上来，所以我们直接计算好上 <code>1</code> 个台阶有几种走法，第 <code>2</code> 个台阶有几种走法，后面的第<code>n</code> 级台阶的走法就是 <code>n-1</code> 级台阶的走法加上 <code>n-2</code> 级台阶的走法。</p><h2 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="[83]删除排序链表中的重复元素"></a>[83]删除排序链表中的重复元素</h2><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p><p><strong>示例 1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/20220426125455.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/20220426125608.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序 <strong>排列</strong></li></ul><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">deleteDuplicates</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *p = head;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) &#123;<span class="comment">//链表为空</span></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当下一个节点为空就退出循环</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">//当前这个值与下一个值相等</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next-&gt;val == p-&gt;val) &#123;</span><br><span class="line">                p-&gt;next = p-&gt;next-&gt;next;<span class="comment">//断开重复元素的节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下一个节点不为空并且下一个元素与当前这个元素不重复就往后移动</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;val != p-&gt;val) &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题就是简单的将重复元素去重，这题最大的特点是链表的元素已经是排序好了的，所以要利用这个特点来解题。</p><p>思路就是遍历链表，让一个指针 <code>p</code> 指向链表第一个元素，然后向后遍历，判断当前指向的元素的值与下一个元素的值是否相等，相等就让当前这个元素的 <code>next</code> 域指向 <code>next-&gt;next</code> ，这样就相当于去掉了重复的元素，这里需要注意的是最好在断开节点的时候，将断开的那个节点释放资源。还有一点就是在更新操作之后不要马上向后移动节点，因为更新操作了，可能导致移动指针指向的是空节点，再判断空节点的后一个域会出现异常。</p><h3 id="LeetCode题解"><a href="#LeetCode题解" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-49v5/">LeetCode题解</a></h3><h4 id="方法一：一次遍历"><a href="#方法一：一次遍历" class="headerlink" title="方法一：一次遍历"></a>方法一：一次遍历</h4><h5 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a><strong>思路与算法</strong></h5><p>由于给定的链表是排好序的，因此重复的元素在链表中出现的位置是连续的，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。</p><p>具体地，我们从指针 $\textit{cur}$ 指向链表的头节点，随后开始对链表进行遍历。如果当前 $\textit{cur}$ 与 $\textit{cur.next}$对应的元素相同，那么我们就将 $\textit{cur.next}$ 从链表中移除；否则说明链表中已经不存在其它与 $\textit{cur}$ 对应的元素相同的节点，因此可以将 $\textit{cur}$ 指向 $\textit{cur.next}$。</p><p>当遍历完整个链表之后，我们返回链表的头节点即可。</p><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a><strong>细节</strong></h5><p>当我们遍历到链表的最后一个节点时，$\textit{cur.next}$ 为空节点，如果不加以判断，访问 $\textit{cur.next}$ 对应的元素会产生运行错误。因此我们只需要遍历到链表的最后一个节点，而不需要遍历完整个链表。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h5><p>注意下面 $\texttt{C++}$ 代码中并没有释放被删除的链表节点的空间。如果在面试中遇到本题，读者需要针对这一细节与面试官进行沟通。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplicates</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur-&gt;val == cur-&gt;next-&gt;val) &#123;</span><br><span class="line">                cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="[88]合并两个有序数组"></a>[88]合并两个有序数组</h2><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组 <code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。 </p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>$nums1.length == m + n$</li><li>$nums2.length == n$</li><li>$0 &lt;= m, n &lt;= 200$</li><li>$1 &lt;= m + n &lt;= 200$</li><li>$-10^9 &lt;= nums1[i], nums2[j] &lt;= 10^9$</li></ul><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt; &amp;nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = m - <span class="number">1</span>, j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//数组n的长度为0，直接退出</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组nums1的长度为0，将nums2数组里面的元素全部放入数组nums1</span></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                nums1[k] = nums2[k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历比较数组nums1和数组nums2里面的元素，大的放数组nums1的最后面</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;<span class="comment">//将数组nums2的元素放在nums1最后面</span></span><br><span class="line">                nums1[i + j + <span class="number">1</span>] = nums2[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//将数组nums1有效的元素放在nums1最后面</span></span><br><span class="line">                nums1[i + j + <span class="number">1</span>] = nums1[i];</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可能数组nums1遍历完了，但是数组nums2里面的元素还没有放入nums1</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            nums1[j] = nums2[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题就是考察双指针问题，拿到题目我们就可以想到就是遍历两个数组，将数组中的元素进行比较放入恰当的位置即可。唯一不同的就是我们需要将所有的元素都放入数组 <code>nums1</code> 。</p><p>思路就是首先判断 <code>nums2</code> 数组的长度是否等于 <code>0</code> ，等于 <code>0</code> 说明数组 <code>num2</code> 没有元素，直接返回就可以了。如果 <code>num1</code> 数组长度等于 <code>0</code> 此时就可以直接将数组 <code>num2</code> 里面的元素全部按顺序放进 <code>nums1</code> 里面不需要考虑数组 <code>nums2</code> 里面有没有元素。接着就是遍历两个数组，一开始都指向有效元素的位置，比较元素的大小，大的元素就插入到数组 <code>nums1</code> 中，插入的位置为如下公式：</p><script type="math/tex; mode=display">插入位置=指向nums1数组的指针的下标 i +指向nums2数组的指针的下标 j +1</script><p>判断结束的条件是 <code>j&gt;=0&amp;&amp;i&gt;=0</code> 因为当 <code>j&lt;0</code> 时表示已经将 <code>nums2</code> 数组中的元素都放入 <code>nums1</code> 中，而 <code>i&lt;0</code> 则表示 <code>nums1</code> 数组中的元素都放在了恰当的位置，所以最后来个 <code>while</code> 将 <code>nums2</code> 数组中的元素放入 <code>nums1</code> 中就可以了。 </p><h3 id="LeetCode题解-1"><a href="#LeetCode题解-1" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/solution/he-bing-liang-ge-you-xu-shu-zu-by-leetco-rrb0/">LeetCode题解</a></h3><h4 id="方法一：直接合并后排序"><a href="#方法一：直接合并后排序" class="headerlink" title="方法一：直接合并后排序"></a>方法一：直接合并后排序</h4><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong>算法</strong></h5><p>最直观的方法是先将数组 $\textit{nums}_2$放进数组 $\textit{nums}_1$的尾部，然后直接对整个数组进行排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">            nums1[m + i] = nums2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(nums1.<span class="built_in">begin</span>(), nums1.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h4><h5 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a><strong>算法</strong></h5><p>方法一没有利用数组 $\textit{nums}_1$  与 $\textit{nums}_2$ 已经被排序的性质。为了利用这一性质，我们可以使用双指针方法。这一方法将两个数组看作队列，每次从两个数组头部取出比较小的数字放到结果中。如下面的动画所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/88.gif" alt="88"></p><p>我们为两个数组分别设置一个指针 $p_1$ 与 $p_2$ 来作为队列的头部指针。代码实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sorted[m + n];</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == m) &#123;</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == n) &#123;</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">                cur = nums1[p1++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = nums2[p2++];</span><br><span class="line">            &#125;</span><br><span class="line">            sorted[p1 + p2 - <span class="number">1</span>] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i != m + n; ++i) &#123;</span><br><span class="line">            nums1[i] = sorted[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法三：逆向双指针"><a href="#方法三：逆向双指针" class="headerlink" title="方法三：逆向双指针"></a>方法三：逆向双指针</h4><h5 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a><strong>算法</strong></h5><p>方法二中，之所以要使用临时变量，是因为如果直接合并到数组 $\textit{nums}_1$ 中，$\textit{nums}_1$  中的元素可能会在取出之前被覆盖。那么如何直接避免覆盖 $\textit{nums}_1$  中的元素呢？观察可知，$\textit{nums}_1$  的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 $\textit{nums}_1$  的最后面。严格来说，在此遍历过程中的任意一个时刻，$\textit{nums}_1$  数组中有 $m-p_1-1$ 个元素被放入 $\textit{nums}_1$  的后半部，$\textit{nums}_2$  数组中有 $n-p_2-1$ 个元素被放入 $\textit{nums}_1$  的后半部，而在指针 $p_1$  的后面，$\textit{nums}_1$  数组有 $m+n-p_1$ 个位置。由于</p><script type="math/tex; mode=display">m+n−p_1−1≥m−p_1−1+n−p_2−1</script><p>等价于</p><script type="math/tex; mode=display">p_2≥-1</script><p>永远成立，因此 $p_1$ 后面的位置永远足够容纳被插入的元素，不会产生 $p_1$ 的元素被覆盖的情况。</p><p>实现代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> m, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p1 = m - <span class="number">1</span>, p2 = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> tail = m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span> (p1 &gt;= <span class="number">0</span> || p2 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur = nums2[p2--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">                cur = nums1[p1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &gt; nums2[p2]) &#123;</span><br><span class="line">                cur = nums1[p1--];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = nums2[p2--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[tail--] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="94-二叉树的遍历"><a href="#94-二叉树的遍历" class="headerlink" title="[94]二叉树的遍历"></a>[94]二叉树的遍历</h2><p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong> 遍历</em> </p><p><strong>示例 1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/20220428125738.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 100]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a><strong>题解：</strong></h3><h4 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a><strong>方法一：递归</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">inorderTraversal</span>(root-&gt;left);</span><br><span class="line">            v.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">            <span class="built_in">inorderTraversal</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a><strong>方法二：迭代</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; v;<span class="comment">//定义返回的容器</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">nullptr</span>) &#123;<span class="comment">//root为空直接返回</span></span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode *p = root;<span class="comment">//指向root节点</span></span><br><span class="line">        stack&lt;TreeNode *&gt; s;</span><br><span class="line">        <span class="comment">//栈不为空或者p节点不为空，防止到达某个节点就退出不搜寻</span></span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() || p) &#123;</span><br><span class="line">            <span class="comment">//一直向子树搜寻</span></span><br><span class="line">            <span class="keyword">while</span> (p) &#123;</span><br><span class="line">                s.<span class="built_in">push</span>(p);<span class="comment">//入栈</span></span><br><span class="line">                p = p-&gt;left;<span class="comment">//找左孩子</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = s.<span class="built_in">top</span>();<span class="comment">//指向栈顶元素</span></span><br><span class="line">            s.<span class="built_in">pop</span>();<span class="comment">//弹出栈顶元素</span></span><br><span class="line">            v.<span class="built_in">push_back</span>(p-&gt;val);<span class="comment">//此时表明可以入容器，是按照中序的序列</span></span><br><span class="line">            p = p-&gt;right;<span class="comment">//获取当前节点的右孩子，然后找这个右孩子节点的左孩子</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这道题就是二叉树的基本操作，具体可以查看我的文章<a href="./二叉树">二叉树</a></p><h3 id="LeetCode题解-2"><a href="#LeetCode题解-2" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/solution/er-cha-shu-de-zhong-xu-bian-li-by-leetcode-solutio/">LeetCode题解</a></h3><p>方法一和方法二类似就不实现了。</p><h4 id="方法三：Morris-中序遍历"><a href="#方法三：Morris-中序遍历" class="headerlink" title="方法三：Morris 中序遍历"></a>方法三：Morris 中序遍历</h4><h5 id="思路与算法-1"><a href="#思路与算法-1" class="headerlink" title="思路与算法"></a><strong>思路与算法</strong></h5><p><strong>Morris 遍历算法</strong>是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为 $O(1)$。</p><p><strong>Morris 遍历算法</strong>整体步骤如下（假设当前遍历到的节点为 $x$）：</p><ol><li>如果 $x$ 无左孩子，先将 $x$ 的值加入答案数组，再访问 $x$ 的右孩子，即 $x = x.\textit{right}$。</li><li>如果 $x$ 有左孩子，则找到 $x$ 左子树上最右的节点（即左子树中序遍历的最后一个节点，$x$ 在中序遍历中的前驱节点），我们记为 $\textit{predecessor}$。根据 $\textit{predecessor}$ 的右孩子是否为空，进行如下操作。<ul><li>如果 $\textit{predecessor}$ 的右孩子为空，则将其右孩子指向 xx，然后访问 xx 的左孩子，即 $x = x.\textit{left}$。</li><li>如果 $\textit{predecessor}$ 的右孩子不为空，则此时其右孩子指向 $x$，说明我们已经遍历完 $x$ 的左子树，我们将$\textit{predecessor}$ 的右孩子置空，将 $x$ 的值加入答案数组，然后访问 $x$ 的右孩子，即 $x = x.\textit{right}$。</li></ul></li><li>重复上述操作，直至访问完整棵树。</li></ol><p>其实整个过程我们就多做一步：假设当前遍历到的节点为 $x$，将 $x$ 的左子树中最右边的节点的右孩子指向 $x$，这样在左子树遍历完成后我们通过这个指向走回了 $x$，且能通过这个指向知晓我们已经遍历完成了左子树，而不用再通过栈来维护，省去了栈的空间复杂度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        TreeNode *predecessor = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (root != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="comment">// predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止</span></span><br><span class="line">                predecessor = root-&gt;left;</span><br><span class="line">                <span class="keyword">while</span> (predecessor-&gt;right != <span class="literal">nullptr</span> &amp;&amp; predecessor-&gt;right != root) &#123;</span><br><span class="line">                    predecessor = predecessor-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 让 predecessor 的右指针指向 root，继续遍历左子树</span></span><br><span class="line">                <span class="keyword">if</span> (predecessor-&gt;right == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    predecessor-&gt;right = root;</span><br><span class="line">                    root = root-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 说明左子树已经访问完了，我们需要断开链接</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                    predecessor-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">                    root = root-&gt;right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果没有左孩子，则直接访问右孩子</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">                root = root-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的理解之KMP算法</title>
      <link href="/posts/5cb3/"/>
      <url>/posts/5cb3/</url>
      
        <content type="html"><![CDATA[<h1 id="我的理解之KMP算法"><a href="#我的理解之KMP算法" class="headerlink" title="我的理解之KMP算法"></a>我的理解之KMP算法</h1><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2>]]></content>
      
      
      
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-SecondWeek</title>
      <link href="/posts/d5ee/"/>
      <url>/posts/d5ee/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-SecondWeek"><a href="#Leetcode-SecondWeek" class="headerlink" title="Leetcode-SecondWeek"></a>Leetcode-SecondWeek</h1><h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="[28]实现 strStr()"></a>[28]实现 strStr()</h2><p>实现 <code>strStr()</code> 函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 <code>0</code> 开始）。如果不存在，则返回  <code>-1</code> 。</p><p><strong>说明：</strong></p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 <code>0</code> 。这与 C 语言的 <code>strstr()</code> 以及 <code>Java</code> 的 <code>indexOf()</code> 定义相符。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;hello&quot;, needle = &quot;ll&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;&quot;, needle = &quot;&quot;</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= haystack.length, needle.length &lt;= 10^4$</li><li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li></ul><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">length</span>() == <span class="number">0</span>) &#123;<span class="comment">//needle长度等于0直接返回0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">-1</span>;<span class="comment">//定义需要返回的下标</span></span><br><span class="line">        <span class="comment">//遍历haystack字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; haystack.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            <span class="comment">//找到needle字符中的第一个字符在haystack字符串中出现的第一个位置</span></span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//遍历needle字符串判断从haystack字符串第i个字符开始后面是否都匹配</span></span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; needle.<span class="built_in">length</span>(); ++j) &#123;</span><br><span class="line">                    <span class="comment">//有一个不匹配就break</span></span><br><span class="line">                    <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果都匹配了说明下标j遍历到了needle字符串的最后一个位置</span></span><br><span class="line">                <span class="keyword">if</span> (j == needle.<span class="built_in">length</span>()) &#123;</span><br><span class="line">                    index = i;<span class="comment">//index记录改变为i</span></span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//此时找到了不需要进行遍历了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;<span class="comment">//返回index</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><em>思路：</em></h4><p>这题主要考察的就是字符串的匹配，其实在数据结构这门课程里面学习过<font color='red'><code>KMP算法</code></font>，但是学习不精看到可以想到要使用这个算法，但是不知道怎么写，所以使用的是另一种自己单纯想到的算法，下面就来描述下自己的想法。</p><p>首先根据题意判断如果 <code>needle</code>字符串为空串就返回 <code>0</code> 。定义一个 <code>index</code> 记录匹配 <code>haystack</code> 字符串开始的位置，初始值设置成 <code>-1</code> ，因为找不到也是返回 <code>-1</code> ，并且字符串下标是从 <code>0</code> 开始的，所以不会冲突。直接遍历<code>haystack</code>字符串，找到出现了某个字符与 <code>needle</code> 字符串第一个字符匹配的情况，此时就开始同时遍历 <code>needle</code> 和 <code>haystack</code> ，判断每个字符是否都相等，如果都相等就将 <code>index</code>记录成当前在 <code>haystack</code> 字符串匹配的第 <code>i</code> 个位置并且跳出循环表示已经找到，否则继续找。</p><h4 id="LeetCode题解"><a href="#LeetCode题解" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/implement-strstr/solution/shi-xian-strstr-by-leetcode-solution-ds6y/"><strong>LeetCode题解</strong></a></h4><h4 id="方法一：暴力匹配"><a href="#方法一：暴力匹配" class="headerlink" title="方法一：暴力匹配"></a>方法一：暴力匹配</h4><p><strong>思路及算法</strong></p><p>我们可以让字符串 <code>needle</code> 与字符串 <code>haystack</code> 的所有长度为 <code>m</code> 的子串均匹配一次。</p><p>为了减少不必要的匹配，我们每次匹配失败即立刻停止当前子串的匹配，对下一个子串继续匹配。如果当前子串匹配成功，我们返回当前子串的开始位置即可。如果所有子串都匹配失败，则返回 <code>−1</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：Knuth-Morris-Pratt（KMP）-算法"><a href="#方法二：Knuth-Morris-Pratt（KMP）-算法" class="headerlink" title="方法二：Knuth-Morris-Pratt（KMP） 算法*"></a>方法二：Knuth-Morris-Pratt（KMP） 算法<font color='red'>*</font></h4><p><strong>思路及算法</strong></p><p>KMP算法见<a href="./我的理解之KMP算法">我的理解之KMP算法</a></p><p><strong>如何解决本题</strong></p><p>记字符串 <em><code>haystack</code></em> 的长度为 <em><code>n</code></em>，字符串 <em><code>needle</code></em> 的长度为 <em><code>m</code></em>。</p><p>我们记字符串 <code>str=needle+#+haystack</code>，即将字符串<code>needle</code> 和 <code>haystack</code> 进行拼接，并用不存在于两串中的特殊字符 <code>#</code> 将两串隔开，然后我们对字符串 <code>str</code> 求前缀函数。</p><p>因为特殊字符 <code>#</code> 的存在，字符串 <code>str</code> 中 <code>haystack</code> 部分的前缀函数所对应的真前缀必定落在字符串 <code>needle</code> 部分，真后缀必定落在字符串 <code>haystack</code> 部分。当 <code>haystack</code> 部分的前缀函数值为 <code>m</code> 时，我们就找到了一次字符串 <code>needle</code> 在字符串 <code>haystack</code> 中的出现（因为此时真前缀恰为字符串 <code>needle</code>）。</p><p>实现时，我们可以进行一定的优化，包括：</p><ol><li><p>我们无需显式地创建字符串 <code>str</code>。</p><ul><li>为了节约空间，我们只需要顺次遍历字符串 <code>needle</code>、特殊字符 <code>#</code> 和字符串 <code>haystack</code> 即可。</li></ul></li><li><p>也无需显式地保存所有前缀函数的结果，而只需要保存字符串 <em><code>needle</code></em> 部分的前缀函数即可。</p><ul><li>特殊字符 <code>#</code> 的前缀函数必定为 <code>0</code>，且易知 <em><code>π</code></em><code>(</code><em><code>i</code></em><code>)≤</code><em><code>m</code></em>（真前缀不可能包含特殊字符 <code>#</code>）。</li><li>这样我们计算 <code>π(i)</code> 时，<code>j=π(π(π(…)−1)−1)</code> 的所有的取值中仅有 <code>π(i−1)</code> 的下标可能大于等于 <code>m</code>。我们只需要保存前一个位置的前缀函数，其它的 <code>j</code> 的取值将全部为字符串 <code>needle</code> 部分的前缀函数。</li></ul></li><li><p>我们也无需特别处理特殊字符 <code>#</code>，只需要注意处理字符串 <code>haystack</code> 的第一个位置对应的前缀函数时，直接设定 <code>j</code> 的初值为 <code>0</code> 即可。</p></li></ol><p>这样我们可以将代码实现分为两部分：</p><ol><li>第一部分是求 <code>needle</code> 部分的前缀函数，我们需要保留这部分的前缀函数值。</li><li>第二部分是求 <code>haystack</code> 部分的前缀函数，我们无需保留这部分的前缀函数值，只需要用一个变量记录上一个位置的前缀函数值即可。当某个位置的前缀函数值等于 <code>m</code> 时，说明我们就找到了一次字符串 <code>needle</code> 在字符串 <code>haystack</code> 中的出现（因为此时真前缀恰为字符串 <code>needle</code>，真后缀为以当前位置为结束位置的字符串 <code>haystack</code> 的子串），我们计算出起始位置，将其返回即可。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = haystack.<span class="built_in">size</span>(), m = needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j]) &#123;</span><br><span class="line">                j = pi[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            pi[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = pi[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="[35]搜索插入位置"></a>[35]搜索插入位置</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>提示:</p><ul><li>$1 &lt;= nums.length &lt;= 10^4$</li><li>$-10^4= 1  &lt;= nums[i] &lt;= 10^4$</li><li>$nums 为 无重复元素 的 升序 排列数组$</li><li>$10^4 &lt;= target &lt;= 10^4$</li></ul><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这题就是二分查找的改造</span></span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>;<span class="comment">//low指针指向前面的元素</span></span><br><span class="line">        <span class="type">int</span> high = nums.<span class="built_in">size</span>() - <span class="number">1</span>;<span class="comment">//high指针指向后面的元素</span></span><br><span class="line">        <span class="type">int</span> mid;<span class="comment">//mid指针指向low和high指针的中间</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;<span class="comment">//low指针和high指针没有相遇</span></span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;<span class="comment">//mid指向low和high的中间</span></span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;<span class="comment">//mid指向的元素小于目标值</span></span><br><span class="line">                low = mid + <span class="number">1</span>;<span class="comment">//说明target只可能出现在mid和high的中间</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;<span class="comment">//mid指向的元素大于目标值</span></span><br><span class="line">                high = mid - <span class="number">1</span>;<span class="comment">//说明target只可能出现在mid和low的中间</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;<span class="comment">//找到了，直接返回目标值的位置</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> high + <span class="number">1</span>;<span class="comment">//说明在数组最终没有这个元素，返回最靠近这个元素的后一个位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a><em>思路：</em></h3><p>这题其实主要考察的就是二分查找，所以拿到手看到查找就想到直接遍历一遍就可以了，但是看到要求是<code>O(log n)</code>的时间复杂度，就知道了这题目考察的应该就是<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/10628618?fr=aladdin">二分查找</a>了，所以还是比较容易上手的。</p><p><strong>二分查找解释：</strong>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><p>在这题中我们就是完全按照二分查找的思路进行就可以了，找到就直接返回就可以了。不过在找不到的时候，我们需要进行分析下返回的是什么值。在这题中，如果找不到我们需要返回这个元素应该插入的位置。由于遍历的时候 <code>low</code>指针只有大于等于 <code>high</code> 指针的时候才进行返回，所以这个元素当找不到的时候，插入的位置就是 <code>high</code> 指针指向的后一个位置，所以我们需要返回的是 <code>high+1</code>。</p><p><strong><u><a href="https://leetcode-cn.com/problems/search-insert-position/solution/sou-suo-cha-ru-wei-zhi-by-leetcode-solution/">LeetCode题解</a></u>类似就不做介绍了</strong></p><h2 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="[53]最大子数组和"></a>[53]最大子数组和</h2><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p>$1 &lt;= nums.length &lt;= 10^5$</p><p>$-10^4 &lt;= nums[i] &lt;= 10^4$</p></li></ul><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> dp = <span class="number">0</span>;<span class="comment">//记录变化的值，更新作用</span></span><br><span class="line">        <span class="type">int</span> max = nums[<span class="number">0</span>];<span class="comment">//记录最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp + nums[i] &gt; nums[i]) &#123;<span class="comment">//dp加上当前值大于当前值，说明加上这个值会产生最大值</span></span><br><span class="line">                dp += nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//dp加上当前值小于当前值，说明前面的值只会导致更小，需要舍弃</span></span><br><span class="line">                dp = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; dp) &#123;<span class="comment">//变化最大值</span></span><br><span class="line">                max = dp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a><em>思路：</em></h3><p>这题目考察的就是动态规划，不过一般的方法也可以求出来，但是就不是 <code>O(n)</code> 的时间复杂度了。所以在这题还是需要使用动态规划。</p><p>这题目由于不需要返回最大子数组是说明，所以利用这个特点，思路就是用 <code>dp</code> 记录局部最优值，用 <code>max</code> 记录全局最优值。每遍历一个新元素时，判断（已遍历的连续子数组的和）加上（当前元素值），与（当前元素值）对比谁更大。</p><p>①如果已遍历的连续子数组的和 + 当前元素值 &gt;= 当前元素值说明（已遍历的连续子数组的和）是大于等于 <code>0</code> 的，令 <code>dp</code> = 已遍历的连续子数组的和 + 当前元素值。</p><p>②如果已遍历的连续子数组的和 + 当前元素值 &lt; 当前元素值说明（已遍历的连续子数组的和）是小于 <code>0</code> 的，加上这部分只会拖累当前元素，故应该直接抛弃掉这部分，令 <code>dp</code> = 当前元素值。</p><p>③对比 <code>dp</code> 和 <code>max</code>，如果 <code>dp</code> 更大，则更新到 <code>max</code> 中。</p><p>这样就可以完成搜寻到最大子数组和了。</p><h3 id="LeetCode题解-1"><a href="#LeetCode题解-1" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/"><strong>LeetCode题解</strong></a></h3><h4 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h4><h4 id="思路和算法"><a href="#思路和算法" class="headerlink" title="思路和算法"></a><strong>思路和算法</strong></h4><p><u><font color='green'><strong>思路和上述一致</strong></font></u></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>, maxAns = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x: nums) &#123;</span><br><span class="line">            pre = <span class="built_in">max</span>(pre + x, x);</span><br><span class="line">            maxAns = <span class="built_in">max</span>(maxAns, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：分治"><a href="#方法二：分治" class="headerlink" title="方法二：分治"></a>方法二：分治</h4><h4 id="思路和算法-1"><a href="#思路和算法-1" class="headerlink" title="思路和算法"></a><strong>思路和算法</strong></h4><p>这个分治方法类似于「线段树求解最长公共上升子序列问题」的 pushUp 操作。 也许读者还没有接触过线段树，没有关系，方法二的内容假设你没有任何线段树的基础。当然，如果读者有兴趣的话，推荐阅读线段树区间合并法解决多次询问的「区间最长连续上升序列问题」和「区间最大子段和问题」，还是非常有趣的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">        <span class="type">int</span> lSum, rSum, mSum, iSum;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">pushUp</span><span class="params">(Status l, Status r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> iSum = l.iSum + r.iSum;</span><br><span class="line">        <span class="type">int</span> lSum = <span class="built_in">max</span>(l.lSum, l.iSum + r.lSum);</span><br><span class="line">        <span class="type">int</span> rSum = <span class="built_in">max</span>(r.rSum, r.iSum + l.rSum);</span><br><span class="line">        <span class="type">int</span> mSum = <span class="built_in">max</span>(<span class="built_in">max</span>(l.mSum, r.mSum), l.rSum + r.lSum);</span><br><span class="line">        <span class="keyword">return</span> (Status) &#123;lSum, rSum, mSum, iSum&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Status <span class="title">get</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Status) &#123;a[l], a[l], a[l], a[l]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Status lSub = <span class="built_in">get</span>(a, l, m);</span><br><span class="line">        Status rSub = <span class="built_in">get</span>(a, m + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pushUp</span>(lSub, rSub);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>).mSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="[58]最后一个单词的长度"></a>[58]最后一个单词的长度</h2><p>给你一个字符串 <code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p><p><strong>单词</strong> 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;Hello World&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：最后一个单词是“World”，长度为5。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;   fly me   to   the moon  &quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最后一个单词是“moon”，长度为4。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;luffy is still joyboy&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：最后一个单词是长度为6的“joyboy”。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= s.length &lt;= 10^4$</li><li><code>s</code> 仅有英文字母和空格 <code>&#39; &#39;</code> 组成</li><li><code>s</code> 中至少存在一个单词</li></ul><h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;<span class="comment">//最后一个单词起始位置</span></span><br><span class="line">        <span class="type">int</span> end = <span class="number">0</span>;<span class="comment">//最后一个单词结束位置</span></span><br><span class="line">        <span class="comment">//遍历s</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = s.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (start != <span class="number">0</span> &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) &#123;<span class="comment">//已经定位了start，记录单词的结束位置</span></span><br><span class="line">                end = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp; start == <span class="number">0</span>) &#123;<span class="comment">//记录单词起始位置</span></span><br><span class="line">                start = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end == <span class="number">0</span> &amp;&amp; s[end] != <span class="string">&#x27; &#x27;</span>) &#123;<span class="comment">//可能s就只有一个单词并且s中第一个字符不是空格</span></span><br><span class="line">            <span class="keyword">return</span> start + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//包括第一个符号是空格的情况和其他情况</span></span><br><span class="line">        <span class="keyword">return</span> start - end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a><em>思路：</em></h3><p>这题目就是单纯的找最后一个单词，所以在思考的时候的想法还是比较简单的，一开始想的是直接<font color='red'>正则表达式</font>，但是不知道C++怎么写（Java曾经使用过）。所以就是想到最基本的方法，不过也还比较简单。</p><p>主要就是遍历字符串（从后面开始遍历，因为记录最后一个单词的长度），首先定义一个变量 <code>start</code> 记录字符串最后一个单词出现的最后一个字母，然后向前走，找到这个单词结束的位置并记录下来退出循环。如果没有找到这个最后一个单词前面的 <code>空格</code> 那就说明 <code>s</code> 字符串就是一个单词，所以我们这里有个判断 <code>end</code> 结指向的位置是否是第一个并且这个位置是字母还是空格，是字母就直接返回 <code>start+1</code> （这里可以自己假设字符串 <code>“str ”</code>和 <code>“ str”</code> ），否则返回 <code>start-end</code> ；</p><h4 id="LeetCode题解类似"><a href="#LeetCode题解类似" class="headerlink" title="LeetCode题解类似"></a><strong><u><a href="https://leetcode-cn.com/problems/length-of-last-word/solution/zui-hou-yi-ge-dan-ci-de-chang-du-by-leet-51ih/">LeetCode题解类似</a></u></strong></h4><h2 id="66-加一"><a href="#66-加一" class="headerlink" title="[66]加一"></a>[66]加一</h2><p>给定一个由 <strong>整数</strong> 组成的 <strong>非空</strong> 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [1,2,3]</span><br><span class="line">输出：[1,2,4]</span><br><span class="line">解释：输入数组表示数字 123。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [4,3,2,1]</span><br><span class="line">输出：[4,3,2,2]</span><br><span class="line">解释：输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = [0]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 100</code></li><li><code>0 &lt;= digits[i] &lt;= 9</code></li></ul><h3 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;<span class="comment">//标记最高位是否有进位</span></span><br><span class="line">        digits[digits.<span class="built_in">size</span>() - <span class="number">1</span>] += <span class="number">1</span>;<span class="comment">//让最低位加1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = digits.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; digits[i] &gt;= <span class="number">10</span>) &#123;<span class="comment">//判断最高位是否需要进位</span></span><br><span class="line">                digits[i] %= <span class="number">10</span>;<span class="comment">//需要进位</span></span><br><span class="line">                flag = <span class="literal">true</span>;<span class="comment">//标记进位</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] &gt;= <span class="number">10</span>) &#123;<span class="comment">//对每个数位进行判断进位操作</span></span><br><span class="line">                digits[i - <span class="number">1</span>] += <span class="number">1</span>;</span><br><span class="line">                digits[i] %= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; newDigits;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            newDigits.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//需要进位，先让最高位等于1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; digits.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            newDigits.<span class="built_in">push_back</span>(digits[i]);<span class="comment">//将剩余数字填入新的数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newDigits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题就是单纯的考察进位操作，所以还是比较的简单的。</p><p>主要的思路就是将最低位数字加1，然后从最低位数字开始遍历，如果需要进位，就让后面的数字进行加1（这里利用的是数组的特点，可以保存 <code>int</code> 型数据，大于 <code>10</code> 也没有关系），对于最高位数字就需要额外判断。如果最高位需要进位就在新的数组里面先放数字 <code>1</code> 再将 <code>digits</code> 数组里面的数字放进新的需要返回的数组，否则就直接将 <code>digits</code> 数组放进新的数组里面。</p><h3 id="LeetCode题解-2"><a href="#LeetCode题解-2" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/plus-one/solution/jia-yi-by-leetcode-solution-2hor/">LeetCode题解</a></h3><h4 id="方法一：找出最长的后缀-99"><a href="#方法一：找出最长的后缀-99" class="headerlink" title="方法一：找出最长的后缀 99"></a>方法一：找出最长的后缀 99</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h5><p>当我们对数组 <code>digits</code> 加一时，我们只需要关注 <code>digits</code> 的末尾出现了多少个 <code>9</code> 即可。我们可以考虑如下的三种情况：</p><ul><li><p>如果 <code>digits</code> 的末尾没有 <code>9</code>，例如 <code>[1,2,3]</code>，那么我们直接将末尾的数加一，得到 <code>[1,2,4]</code> 并返回；</p></li><li><p>如果 <code>digits</code> 的末尾有若干个 <code>9</code>，例如 <code>[1,2,3,9,9]</code>，那么我们只需要找出从末尾开始的第一个不为 <code>9</code> 的元素，即 <code>3</code>，将该元素加一，得到 <code>[1,2,4,9,9]</code>。随后将末尾的 <code>9</code> 全部置零，得到 <code>[1,2,4,0,0]</code> 并返回。</p></li><li><p>如果 <code>digits</code> 的所有元素都是 <code>9</code>，例如 <code>[9,9,9,9,9]</code> ，那么答案为 <code>[1,0,0,0,0,0]</code>。我们只需要构造一个长度比 <code>digits</code> 多 <code>1</code> 的新数组，将首元素置为 <code>1</code>，其余元素置为 <code>0</code> 即可。</p></li></ul><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong>算法</strong></h5><p>我们只需要对数组 <code>digits</code> 进行一次逆序遍历，找出第一个不为 <code>9</code> 的元素，将其加一并将后续所有元素置零即可。如果 <code>digits</code> 中所有的元素均为 <code>9</code>，那么对应着「思路」部分的第三种情况，我们需要返回一个新的数组。</p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = digits.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (digits[i] != <span class="number">9</span>) &#123;</span><br><span class="line">                ++digits[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                    digits[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> digits;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// digits 中所有的元素均为 9</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="[67]二进制求和"></a>[67]二进制求和</h2><p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">输出: &quot;100&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li>每个字符串仅由字符 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> 组成。</li><li>$1 &lt;= a.length, b.length &lt;= 10^4$</li><li>字符串如果不是 <code>&quot;0&quot;</code> ，就都不含前导零。</li></ul><h3 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从后往前操作字符相加，最后进行翻转就可以了</span></span><br><span class="line">        <span class="type">int</span> i = a.<span class="built_in">length</span>() - <span class="number">1</span>, j = b.<span class="built_in">length</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> carry = <span class="string">&#x27;0&#x27;</span>;<span class="comment">//进位数</span></span><br><span class="line">        string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">bool</span> flag;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//分四种情况讨论</span></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//说明要进位，当前这个位置上的数字说明是1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] + b[j] + carry - <span class="string">&#x27;0&#x27;</span> - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明要进位，当前这个位置上的数字说明是0</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] + b[j] + carry - <span class="string">&#x27;0&#x27;</span> - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;2&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明不要进位，当前这个位置上的数字说明是1</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] + b[j] + carry - <span class="string">&#x27;0&#x27;</span> - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;1&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//说明不要进位，当前这个位置上的数字说明是0</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] + b[j] + carry - <span class="string">&#x27;0&#x27;</span> - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;0&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时还有一串字符没有遍历完进行最后操作</span></span><br><span class="line">        <span class="comment">//i指向的字符串没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//和上述进位判断类似，由于只有两个数字相加只需要判断2，1，0三种情况</span></span><br><span class="line">            <span class="keyword">if</span> (a[i] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[i] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;1&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (a[i] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;0&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j指向的字符串没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (b[j] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (b[j] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;1&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (b[j] + carry - <span class="string">&#x27;0&#x27;</span> == <span class="string">&#x27;0&#x27;</span> &amp;&amp; flag) &#123;</span><br><span class="line">                carry = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后还要进位一个数字，就加上1</span></span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            result += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="comment">//翻转字符串</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = result.<span class="built_in">length</span>() - <span class="number">1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">            ans += result[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题目就是直接进行字符的相加就可以，一开始不过都会想到进行转化成数字，但是想想这样子的操作太麻烦了，所以想到的就是直接进行字符的相加。</p><p>思路就是从末尾开始相加，对每个字符进行相加，并且加个<code>carry</code> 进位的 <code>char</code> 类型的符号，一开始设定字符为 <code>0</code> 表示不用进位，当需要进位的时候就将它设置为 <code>1</code> 。由于可能两串字符串的长度可能不同，所以最后还需要进行遍历没有遍历完的字符串，进行最后的操作。在这里需要注意的是为了每个位置对应的相加操作只进行一次，所以我们加了个标志位 <code>flag</code> ，防止由于 <code>carry</code> 的改变导致再次进入后面的 <code>if</code> 判断进行再次的相加操作。</p><h3 id="LeetCode题解-3"><a href="#LeetCode题解-3" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/add-binary/solution/er-jin-zhi-qiu-he-by-leetcode-solution/">LeetCode题解</a></h3><h4 id="方法一：模拟"><a href="#方法一：模拟" class="headerlink" title="方法一：模拟"></a>方法一：模拟</h4><h5 id="思路和算法-2"><a href="#思路和算法-2" class="headerlink" title="思路和算法"></a><strong>思路和算法</strong></h5><p>我们可以借鉴「列竖式」的方法，末尾对齐，逐位相加。在十进制的计算中「逢十进一」，二进制中我们需要「逢二进一」。</p><p>具体的，我们可以取 <code>n=max&#123;∣a∣,∣b∣&#125;</code>，循环 <code>n</code> 次，从最低位开始遍历。我们使用一个变量 <code>carry</code> 表示上一个位置的进位，初始值为 <code>0</code>。记当前位置对其的两个位为 $a_i$  和 $b_i$，则每一位的答案为 $(carry+a_i +b_i )mod2$，下一位的进位为⌊$\frac{carry+a_i+a_j}{2}$  ⌋。重复上述步骤，直到数字 <code>a</code> 和 <code>b</code> 的每一位计算完毕。最后如果<code>carry</code> 的最高位不为 <code>0</code>，则将最高位添加到计算结果的末尾。</p><p>注意，为了让各个位置对齐，你可以先反转这个代表二进制数字的字符串，然后低下标对应低位，高下标对应高位。当然你也可以直接把 <code>a</code> 和 <code>b</code> 中短的那一个补 <code>0</code> 直到和长的那个一样长，然后从高位向低位遍历，对应位置的答案按照顺序存入答案字符串内，最终将答案串反转。这里的代码给出第一种的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()), carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            carry += i &lt; a.<span class="built_in">size</span>() ? (a.<span class="built_in">at</span>(i) == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            carry += i &lt; b.<span class="built_in">size</span>() ? (b.<span class="built_in">at</span>(i) == <span class="string">&#x27;1&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>((carry % <span class="number">2</span>) ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            carry /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (carry) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：位运算"><a href="#方法二：位运算" class="headerlink" title="方法二：位运算"></a>方法二：位运算</h4><h5 id="思路和算法-3"><a href="#思路和算法-3" class="headerlink" title="思路和算法"></a><strong>思路和算法</strong></h5><p>我们可以设计这样的算法来计算：</p><ul><li><p>把 <em><code>a</code></em> 和 <em><code>b</code></em> 转换成整型数字 <em><code>x</code></em> 和 <em><code>y</code></em>，在接下来的过程中，<em><code>x</code></em> 保存结果，<em><code>y</code></em> 保存进位。</p></li><li><p>当进位不为 <code>0</code> 时</p><ul><li><p>计算当前 <code>x</code> 和 <code>y</code> 的无进位相加结果：<code>answer = x ^ y</code></p></li><li><p>计算当前 <code>x</code> 和 <code>y</code> 的进位：<code>carry = (x &amp; y) &lt;&lt; 1</code></p></li><li><p>完成本次循环，更新 <code>x = answer</code>，<code>y = carry</code></p></li></ul></li><li><p>返回 <code>x</code> 的二进制形式</p></li></ul><p>为什么这个方法是可行的呢？在第一轮计算中，<code>answer</code> 的最后一位是 <code>x</code> 和 <code>y</code> 相加之后的结果，<code>carry</code> 的倒数第二位是 <code>x</code> 和 <code>y</code> 最后一位相加的进位。接着每一轮中，由于 <code>carry</code> 是由 <code>x</code> 和 <code>y</code> 按位与并且左移得到的，那么最后会补零，所以在下面计算的过程中后面的数位不受影响，而每一轮都可以得到一个低 ii 位的答案和它向低 <code>i + 1</code> 位的进位，也就模拟了加法的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBinary</span>(<span class="params">self, a, b</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        x, y = <span class="built_in">int</span>(a, <span class="number">2</span>), <span class="built_in">int</span>(b, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            answer = x ^ y</span><br><span class="line">            carry = (x &amp; y) &lt;&lt; <span class="number">1</span></span><br><span class="line">            x, y = answer, carry</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:]</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="[69]x的平方根"></a>[69]x的平方根</h2><p>给你一个非负整数 <code>x</code> ，计算并返回 <code>x</code>的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 <code>pow(x, 0.5)</code> 或者 <code>x ** 0.5</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 4</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 8</span><br><span class="line">输出：2</span><br><span class="line">解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= x &lt;= 2^{31} - 1$</li></ul><h3 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a><strong>题解：</strong></h3><h4 id="方法一：投机取巧"><a href="#方法一：投机取巧" class="headerlink" title="方法一：投机取巧"></a>方法一：投机取巧</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//直接开根号强制转换返回int数据类型，此时自定向下取整</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) <span class="built_in">sqrt</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二：二分查找"><a href="#方法二：二分查找" class="headerlink" title="方法二：二分查找"></a>方法二：二分查找</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;<span class="comment">//x是1就直接返回1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = x;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="comment">//利用二分法进行查找</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt;= x / mid &amp;&amp; (mid + <span class="number">1</span>) &gt; x / (mid + <span class="number">1</span>)) &#123;<span class="comment">//说明mid是那个解</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt; x / mid) &#123;<span class="comment">//说明解在mid和high之间</span></span><br><span class="line">                low = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mid &gt; x / mid) &#123;<span class="comment">//说明解在mid和low之间</span></span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题一开始拿到手还以为就是直接开根号出来进行直接取整就可以，后来看了下评论区发现那样子做其实并不好算是投机取巧了，所以就换了种方法写，也并不难，就相当于是二分法的变形吧。</p><p>思路主要就是每次折中进行查找，判断解会出现在哪个区间，就去那个区间进行查找，需要注意的是因为我们是进行向下取整的，所以我们需要在判断的时候判断 <code>mid &lt;= x / mid &amp;&amp; (mid + 1) &gt; x / (mid + 1)</code>，因为此时找到的是 <code>mid</code> ，不然解就出现在 <code>mid+1-high</code> 区间里面。</p><h3 id="LeetCode题解-4"><a href="#LeetCode题解-4" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/sqrtx/solution/x-de-ping-fang-gen-by-leetcode-solution/">LeetCode题解</a></h3><h4 id="方法一：袖珍计算器算法"><a href="#方法一：袖珍计算器算法" class="headerlink" title="方法一：袖珍计算器算法"></a>方法一：袖珍计算器算法</h4><p>袖珍计算器算法」是一种用指数函数 $ \exp $ 和对数函数 $ \ln $ 代替平方根函数的方法。我们通过有限的可以使用的数学函数，得到我们想要计算的结果。</p><p>我们将 $\sqrt{x}$ 写成幂的形式 $ x^{1/2} $ ，再使用自然对数 $ e $ 进行换底，即可得到：</p><script type="math/tex; mode=display">\sqrt{x}= x^{1/2}=e^{(lnx)1/2}=e^{\frac{1}{2}lnx}</script><p>这样我们就可以得到 $\sqrt{x}$ 的值了。</p><p><strong>注意：</strong>由于计算机无法存储浮点数的精确值（浮点数的存储方法可以参考 <a href="https://baike.baidu.com/item/IEEE%20754">IEEE 754</a>，这里不再赘述），而指数函数和对数函数的参数和返回值均为浮点数，因此运算过程中会存在误差。例如当 $x=2147395600$ 时，$e^{\frac{1}{2} \ln x}$的计算结果与正确值 4634046340 相差 $10^{-11}$，这样在对结果取整数部分时，会得到 $46339$ 这个错误的结果。</p><p>因此在得到结果的整数部分 $\textit{ans}$ 后，我们应当找出 $\textit{ans}$ 与 $\textit{ans} + 1$ 中哪一个是真正的答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">exp</span>(<span class="number">0.5</span> * <span class="built_in">log</span>(x));</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">long</span> <span class="type">long</span>)(ans + <span class="number">1</span>) * (ans + <span class="number">1</span>) &lt;= x ? ans + <span class="number">1</span> : ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：牛顿迭代"><a href="#方法二：牛顿迭代" class="headerlink" title="方法二：牛顿迭代"></a>方法二：牛顿迭代</h4><p><a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95">牛顿迭代法</a>是一种可以用来快速求解函数零点的方法。</p><p>为了叙述方便，我们用 <em>$C$</em> 表示待求出平方根的那个整数。显然，<em>$C$</em> 的平方根就是函数</p><script type="math/tex; mode=display">y=f(x)=x^2−C</script><p>的零点。</p><p>牛顿迭代法的本质是借助泰勒级数，从初始值开始快速向零点逼近。我们任取一个 $x<em>0$ 作为初始值，在每一步的迭代中，我们找到函数图像上的点 $(x_i, f(x_i))$，过该点作一条斜率为该点导数$ f’(x_i)$ 的直线，与横轴的交点记为 $x</em>{i+1}$ 。$x_{i+1}$  相于 $x_i$ 而言距离零点更近。在经过多次迭代后，我们就可以得到一个距离零点非常接近的交点。下图给出了从 $x_0$  开始迭代两次，得到 $x_1$ 和 $x_2$ 的过程。</p><p><img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/69.png" alt=""></p><p><strong>算法</strong></p><p>我们选择 $x_0 = C$ 作为初始值。在每一步迭代中，我们通过当前的交点 $x_i$，找到函数图像上的点 $(x_i, x_i^2 - C)$，作一条斜率为 $f’(x_i) = 2x_i$ 的直线，直线的方程为：</p><script type="math/tex; mode=display">y_l=2x i (x−x i )+x_i^2 −C\\=2x_i x−(x_i^2 +C)</script><p>与横轴的交点为方程 $2x<em>ix - (x_i^2 + C) = 0$ 的解，即为新的迭代结果 $x</em>{i+1}$x ：</p><script type="math/tex; mode=display">x_{i+1}=\frac{1}{2}(x_i+\frac{C}{x_i})</script><p>在进行 $k$ 次迭代后，$x_k$ 的值与真实的零点 $\sqrt{C}$ 足够接近，即可作为答案。</p><p><strong>细节</strong></p><ul><li><p>为什么选择 $x_0 = C$  作为初始值？</p><ul><li>因为 $y = x^2 - C$ 有两个零点 $-\sqrt{C}$  和 $\sqrt{C}$  。如果我们取的初始值较小，可能会迭代到 $-\sqrt{C}$ 这个零点，而我们希望找到的是 $\sqrt{C}$ 这个零点。因此选择 $x<em>0 = C$ 作为初始值，每次迭代均有 $x</em>{i+1} &lt; x_i$，零点 $\sqrt{C}$  在其左侧，所以我们一定会迭代到这个零点。</li></ul></li><li><p>迭代到何时才算结束？</p><ul><li>每一次迭代后，我们都会距离零点更进一步，所以当相邻两次迭代得到的交点<strong>非常接近</strong>时，我们就可以断定，此时的结果已经足够我们得到答案了。一般来说，可以判断相邻两次迭代的结果的差值是否小于一个极小的非负数 $\epsilon$，其中 $\epsilon$ 一般可以取 $10^{-6}$ 或 $10^{-7}$ 。</li></ul></li><li><p>如何通过迭代得到的近似零点得出最终的答案？</p><ul><li><p>由于 $y = f(x)$ 在$[\sqrt{C}, +\infty]$ 上是凸函数（convex function）且恒大于等于零，那么只要我们选取的初始值 $x_0$ 大于等于 $\sqrt{C}$ ，每次迭代得到的结果 $x_i$ 都会恒大于等于 $\sqrt{C}$ 。因此只要 $\epsilon$ 选择地足够小，最终的结果 $x_k$  只会稍稍大于真正的零点 $\sqrt{C} $。在题目给出的 32 位整数范围内，不会出现下面的情况：</p><blockquote><p>真正的零点为 $n - 1/2\epsilon$，其中 $n$ 是一个正整数，而我们迭代得到的结果为 $n + 1/2\epsilon$。在对结果保留整数部分后得到 $n$，但正确的结果为 $n - 1$。</p></blockquote></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> C = x, x0 = x;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">double</span> xi = <span class="number">0.5</span> * (x0 + C / x0);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(x0 - xi) &lt; <span class="number">1e-7</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x0 = xi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(x0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>在这一周主要就还是对字符串进行操作，在这周学到了新的算法，也重新对数学知识有了一定的了解，例如开跟号的题目，一般人都不会想到去列方程来求解一道编程题。在这几次的练习中，主要进行的是字符串的查找和匹配，在我看来，这一周最重要的就是<strong><em>KMP</em></strong>算法了，这其中的知识还是挺难的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++ </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-FirstWeek</title>
      <link href="/posts/7ade/"/>
      <url>/posts/7ade/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-FirstWeek"><a href="#LeetCode-FirstWeek" class="headerlink" title="LeetCode-FirstWeek"></a>LeetCode-FirstWeek</h1><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="[9]回文数"></a>[9]回文数</h2><p>描述：给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 </p><ul><li>例如，<code>121</code> 是回文数，而 <code>123</code> 不是 </li></ul><p><strong>示例1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 121</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = -121</span><br><span class="line">输出：false</span><br><span class="line">解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p><strong>示例3</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 10</span><br><span class="line">输出：false</span><br><span class="line">解释：从右向左读, 为 01 。因此它不是一个回文数</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><ul><li>$-2^{31} &lt;= x &lt;= 2^{31} - 1 $</li></ul><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;<span class="comment">//数字小于0不可能是回文数，直接返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string s = <span class="built_in">to_string</span>(x);<span class="comment">//将x转化成字符串</span></span><br><span class="line">        string s1 = s;<span class="comment">//接受字符串s，便于后面比对</span></span><br><span class="line">        <span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());<span class="comment">//翻转字符串</span></span><br><span class="line">        <span class="keyword">return</span> s1 == s;<span class="comment">//判断翻转前后是否相等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;<span class="comment">//数字小于0直接返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = x;<span class="comment">//记录x便于比对</span></span><br><span class="line">        <span class="type">double</span> cur = <span class="number">0</span>;<span class="comment">//每次翻转取余更新的数字</span></span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            cur = cur * <span class="number">10</span> + x % <span class="number">10</span>;<span class="comment">//取出来的数字乘以10加上x取余得到的数字</span></span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t == cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="LeetCode题解"><a href="#LeetCode题解" class="headerlink" title="LeetCode题解"></a><strong><a href="https://leetcode-cn.com/problems/palindrome-number/solution/hui-wen-shu-by-leetcode-solution/">LeetCode题解</a></strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 特殊情况：</span></span><br><span class="line">        <span class="comment">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class="line">        <span class="comment">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span></span><br><span class="line">        <span class="comment">// 则其第一位数字也应该是 0</span></span><br><span class="line">        <span class="comment">// 只有 0 满足这一属性</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || (x % <span class="number">10</span> == <span class="number">0</span> &amp;&amp; x != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> revertedNumber = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x &gt; revertedNumber) &#123;</span><br><span class="line">            revertedNumber = revertedNumber * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class="line">        <span class="comment">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class="line">        <span class="comment">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class="line">        <span class="keyword">return</span> x == revertedNumber || x == revertedNumber / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><p>解释：</p><p>对x整数进行判断，小于0就直接返回false。接下来就是操作大于0的数字了。为了不全部进行翻转，我们其实只要翻转一半即可。假如对数字 <code>12321</code> 进行翻转，由于是奇数个数字，翻转时只要翻转到出现的数字比原来的大就代表翻转了一半。这种意思就是第一次翻转得到的数字是 <code>1232</code> 和 <code>1</code> ，此时 <code>1&lt;1232</code> ，继续翻转，得到 <code>12&lt;123</code> ，继续翻转，<code>123&gt;12</code>，此时翻转结束，由于奇数的数字，最终的那个数字不需要进行比较，所以我们便可以将翻转得到的数字（假设<code>x</code>）<code>x/10</code>，判断与剩下的数字（上述是12）是否相等。对于偶数位个的数字 <code>1221</code> ，此时只需要直接对数字翻转得到了的数字判断相等即可。</p><ul><li>注：翻转结束的条件是原始数字小于等于翻转之后的数字（原始数字在翻转的时候发生了改变的）</li></ul><h2 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="[13]罗马数字转整数"></a>[13]罗马数字转整数</h2><p>描述：罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> +<code>V</code>+<code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;= s.length &lt;= 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics</a> 。</li></ul><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> length = s.<span class="built_in">length</span>();<span class="comment">//获取s字符串的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//比较当前这个字符和下一个字符的大小，小的就减去当前这个</span></span><br><span class="line">            <span class="comment">//就好比&#x27;IV&#x27;是-1+5=4  </span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">getnum</span>(s[i]) &lt; <span class="built_in">getnum</span>(s[i + <span class="number">1</span>]) &amp;&amp; i + <span class="number">1</span> &lt; length) &#123;</span><br><span class="line">                num -= <span class="built_in">getnum</span>(s[i]);  <span class="comment">//减去这个字符对应的数字</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                num += <span class="built_in">getnum</span>(s[i]);  <span class="comment">//加上这个字符对应的数字</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取字符对应的数字</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getnum</span><span class="params">(<span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (x) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a><strong><em>解释：</em></strong></h3><p>这题我拿到手的思路就是将每个字符转化成数字，但是看了题目的要求发现会存在需要进行减法的操作就好比 <code>IV</code> 是 <code>4</code> 运算的过程就是 <code>-1</code> + <code>+5</code> = <code>4</code> 。所以一开始的思路不能完全执行了。考虑到这我就想着直接进行两层的for循环进行遍历不就可以控制后面的字符与前面的字符进行比较了，但是发现如果这个时间复杂度将会变得十分的高，所以肯定不可以这样做，后面思考下发现可以直接一层循环就可以了呀。接下来就是主要的思路了。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>首先我们需要实现一个函数来将字符转化成数字，任何一层for循环直接比较第 <code>i</code> 个字符和第 <code>i+1</code> 个字符就可以了（这里最需要注意的就是需要判断 <code>i+1</code> 个字符有没有越界了，所以上述加了个 <code>i+1&lt;length</code> ）。通过比较存在在前面的字符小于后面的字符说明当前这个字符需要执行的计算是减法，一次遍历执行完所有的字符就可以了。</p><p><strong><a href="https://leetcode-cn.com/problems/roman-to-integer/solution/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/">LeetCode题解</a></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; symbolValues = &#123;</span><br><span class="line">        &#123;<span class="string">&#x27;I&#x27;</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;V&#x27;</span>, <span class="number">5</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;X&#x27;</span>, <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;L&#x27;</span>, <span class="number">50</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;C&#x27;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;D&#x27;</span>, <span class="number">500</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;M&#x27;</span>, <span class="number">1000</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> value = symbolValues[s[i]];</span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; value &lt; symbolValues[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                ans -= value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><p><strong>可以看出思路还是一致的</strong></p><h2 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="[14]最长公共前缀"></a>[14]最长公共前缀</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector &lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;&quot;</span>;<span class="comment">//初始化字符串s，需要被返回的字符串</span></span><br><span class="line">        <span class="type">int</span> minLength = strs[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++) &#123;<span class="comment">//找到最小的字符串的长度</span></span><br><span class="line">            <span class="keyword">if</span> (strs[i].<span class="built_in">length</span>() &lt; minLength) &#123;</span><br><span class="line">                minLength = strs[i].<span class="built_in">length</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//外层循环遍历，控制每个字符串遍历的最长距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; minLength; i++) &#123;</span><br><span class="line">            <span class="type">char</span> str = strs[<span class="number">0</span>][i];<span class="comment">//接收第一个字符串的第i个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; strs.<span class="built_in">size</span>(); j++) &#123;<span class="comment">//遍历每个字符串</span></span><br><span class="line">                <span class="keyword">if</span> (strs[j][i] != str) &#123;<span class="comment">//一旦有一个字符串的第i个字符与第一个字符串的第i个字符不相等就直接返回s终止遍历</span></span><br><span class="line">                    <span class="keyword">return</span> s;<span class="comment">//说明此时已经找到最长的公共前缀</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s += strs[<span class="number">0</span>][i];<span class="comment">//一次循环的第i个字符都相等，s加上这个字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解释：-1"><a href="#解释：-1" class="headerlink" title="解释："></a><strong><em>解释：</em></strong></h3><p>这道题目给的就是一些类的字符串，然后判断这些字符串中的公共最长字符<font color='red'>前缀</font>。最主要的特色是这里指定的是前缀，所以在判断的时候还是比较简单的，接下来就是描述思路了。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>首先我们需要判断出最短的那个字符串出来<font color='blue'>(不过也可以考虑直接在后面比较的时候一起判断)</font>，然后就是根据这个最短的字符串的长度进行遍历<span style="border-bottom:1px solid red;"><strong><em>（因为我们需要返回的是公共最长前缀，所以不可能超过最短的那个字符串长度）</em></strong></span>，外层循环控制遍历所有的字符串的第i个元素，内层 <code>for</code> 循环遍历每个字符串。为了判断每个字符串的第 <code>i</code> 个元素是否都是一样的，所以我们需要定义一个 <code>str</code> 来记录第一个字符串的第 <code>i</code> 个元素，在第二层 <code>for</code> 循环里面来判断当前这个字符串的第 <code>i</code> 个字符是否与 <code>str</code> 相等，不相等就可以直接返回字符串 <font color='red'><code>s</code></font>。当第 <code>i</code> 个字符串都相等就将其加入字符串 <code>s</code> 中，如果都遍历完了，最后就可以直接返回字符串 <font color ='red'><code>s</code></font>。</p><h3 id="LeetCode题解-1"><a href="#LeetCode题解-1" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/solution/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/"><strong>LeetCode题解</strong></a></h3><h4 id="方法一：横向扫描"><a href="#方法一：横向扫描" class="headerlink" title="方法一：横向扫描"></a>方法一：横向扫描</h4><p>用 $LCP(S_1…S_n)$ 表示字符串 $S_1…S_n$ 的最长公共前缀的最长公共前缀。</p><p>可以得到以下结论：</p><script type="math/tex; mode=display">LCP(S_1…S_n)=LCP(LCP(LCP(S_1,S_2),S_3),…S_n)</script><p>基于该结论，可以得到一种查找字符串数组中的最长公共前缀的简单方法。依次遍历字符串数组中的每个字符串，对于每个遍历到的字符串，更新最长公共前缀，当遍历完所有的字符串以后，即可得到字符串数组中的最长公共前缀。</p><p>如果在尚未遍历完所有的字符串时，最长公共前缀已经是空串，则最长公共前缀一定是空串，因此不需要继续遍历剩下的字符串，直接返回空串即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector &lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> count = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            prefix = <span class="built_in">longestCommonPrefix</span>(prefix, strs[i]);</span><br><span class="line">            <span class="keyword">if</span> (!prefix.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(<span class="type">const</span> string &amp;str1, <span class="type">const</span> string &amp;str2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> length = <span class="built_in">min</span>(str1.<span class="built_in">size</span>(), str2.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length &amp;&amp; str1[index] == str2[index]) &#123;</span><br><span class="line">            ++index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str1.<span class="built_in">substr</span>(<span class="number">0</span>, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法二：纵向扫描"><a href="#方法二：纵向扫描" class="headerlink" title="方法二：纵向扫描"></a>方法二：纵向扫描</h4><p>方法和我的类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector &lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> length = strs[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> c = strs[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; count; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == strs[j].<span class="built_in">size</span>() || strs[j][i] != c) &#123;</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法三：分治"><a href="#方法三：分治" class="headerlink" title="方法三：分治"></a>方法三：分治</h4><p>注意到 <strong><em>LCP</em></strong> 的计算满足结合律，有以下结论：</p><script type="math/tex; mode=display">LCP(S_1…S_n)=LCP(LCP(S_1…S_k),LCP(S_{k+1}…S_n))</script><p>其中$LCP(S_1…S_n)$是字符串$S_1…S_n$ 的最长公共前缀，$1&lt;k&lt;n$。</p><p>基于上述结论，可以使用分治法得到字符串数组中的最长公共前缀。对于问题$LCP(S_i…S_j)$，可以分解成两个子问题$LCP(S_i…S_mid)$与$LCP(S_mid+1…S_j)$其中 $mid=\frac{i+j}{2}$ 。对两个子问题分别求解，然后对两个子问题的解计算最长公共前缀，即为原问题的解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector &lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">longestCommonPrefix</span>(strs, <span class="number">0</span>, strs.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(<span class="type">const</span> vector &lt;string&gt; &amp;strs, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> strs[start];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            string lcpLeft = <span class="built_in">longestCommonPrefix</span>(strs, start, mid);</span><br><span class="line">            string lcpRight = <span class="built_in">longestCommonPrefix</span>(strs, mid + <span class="number">1</span>, end);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">commonPrefix</span>(lcpLeft, lcpRight);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">commonPrefix</span><span class="params">(<span class="type">const</span> string &amp;lcpLeft, <span class="type">const</span> string &amp;lcpRight)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minLength = <span class="built_in">min</span>(lcpLeft.<span class="built_in">size</span>(), lcpRight.<span class="built_in">size</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; minLength; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lcpLeft[i] != lcpRight[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> lcpLeft.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lcpLeft.<span class="built_in">substr</span>(<span class="number">0</span>, minLength);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h4 id="方法四：二分查找"><a href="#方法四：二分查找" class="headerlink" title="方法四：二分查找"></a>方法四：二分查找</h4><p>显然，最长公共前缀的长度不会超过字符串数组中的最短字符串的长度。用 <code>minLength</code>  表示字符串数组中的最短字符串的长度，则可以在 <code>[0,minLength]</code> 的范围内通过二分查找得到最长公共前缀的长度。每次取查找范围的中间值 <code>mid</code> ，判断每个字符串的长度为 <code>mid</code> 的前缀是否相同，如果相同则最长公共前缀的长度一定大于或等于 <code>mid</code>，如果不相同则最长公共前缀的长度一定小于 <code>mid</code> ，通过上述方式将查找范围缩小一半，直到得到最长公共前缀的长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector &lt;string&gt; &amp;strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!strs.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> minLength = <span class="built_in">min_element</span>(strs.<span class="built_in">begin</span>(), strs.<span class="built_in">end</span>(),</span><br><span class="line">                                    [](<span class="type">const</span> string &amp;s, <span class="type">const</span> string &amp;t) &#123; <span class="keyword">return</span> s.<span class="built_in">size</span>() &lt; t.<span class="built_in">size</span>(); &#125;)-&gt;<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> low = <span class="number">0</span>, high = minLength;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (high - low + <span class="number">1</span>) / <span class="number">2</span> + low;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isCommonPrefix</span>(strs, mid)) &#123;</span><br><span class="line">                low = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, low);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isCommonPrefix</span><span class="params">(<span class="type">const</span> vector &lt;string&gt; &amp;strs, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">        string str0 = strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, length);</span><br><span class="line">        <span class="type">int</span> count = strs.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; count; ++i) &#123;</span><br><span class="line">            string str = strs[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str0[j] != str[j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="[20]有效的括号"></a>[20]有效的括号</h2><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li><p>左括号必须以正确的顺序闭合。</p><p><strong>示例 1：</strong></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;([)]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 5：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$1 &lt;= s.length &lt;= 10^4$</li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">length</span>() &lt;= <span class="number">1</span>) &#123;<span class="comment">//字符串长度小于等于1，一定不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">checkright</span>(s[i])) &#123;<span class="comment">//栈不为空并且此时是右括号直接返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">checkleft</span>(s[i])) &#123;<span class="comment">//左括号入栈</span></span><br><span class="line">                st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!st.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">checkright</span>(s[i])) &#123;<span class="comment">//栈不为空并且是右括号</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(st.<span class="built_in">top</span>(), s[i])) &#123;<span class="comment">//栈顶元素和当前括号匹配</span></span><br><span class="line">                    st.<span class="built_in">pop</span>();<span class="comment">//出栈</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//括号不匹配，返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!st.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断左括号</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkleft</span><span class="params">(<span class="type">char</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&#x27;&#123;&#x27;</span> || str == <span class="string">&#x27;[&#x27;</span> || str == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断右括号</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkright</span><span class="params">(<span class="type">char</span> str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&#x27;&#125;&#x27;</span> || str == <span class="string">&#x27;]&#x27;</span> || str == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断左右括号是否匹配</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">char</span> left, <span class="type">char</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="string">&#x27;&#123;&#x27;</span> &amp;&amp; right == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="string">&#x27;[&#x27;</span> &amp;&amp; right == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="string">&#x27;(&#x27;</span> &amp;&amp; right == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这道题主要考察的就是栈的基本性质和括号的匹配规则吧。只要对左括号和右括号的匹配了解，利用栈的基本操作就可以实现了。接下里就是基本的思路。</p><p>首先判断字符串长度，如果长度小于等于<code>1</code>那肯定不合法，直接返回 <code>false</code> 。任何判断是左括号就入栈，是右括号就判断当前这个括号是否与栈顶元素匹配，匹配就出栈，不匹配就可以直接返回 <code>false</code> 了。不过在这里需要注意的是需要判断栈是否为空，只有在栈不为空的情况下才能取栈顶元素，否则会有问题。</p><h3 id="LeetCode题解-2"><a href="#LeetCode题解-2" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/solution/you-xiao-de-gua-hao-by-leetcode-solution/"><strong>LeetCode题解</strong></a></h3><h4 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h4><p>判断括号的有效性可以使用「栈」这一数据结构来解决。</p><p>我们遍历给定的字符串 <code>ss</code>。当我们遇到一个左括号时，我们会期望在后续的遍历中，有一个相同类型的右括号将其闭合。由于后遇到的左括号要先闭合，因此我们可以将这个左括号放入栈顶。</p><p>当我们遇到一个右括号时，我们需要将一个相同类型的左括号闭合。此时，我们可以取出栈顶的左括号并判断它们是否是相同类型的括号。如果不是相同的类型，或者栈中并没有左括号，那么字符串 <code>ss</code> 无效，返回 <code>False</code>。为了快速判断括号的类型，我们可以使用哈希表存储每一种括号。哈希表的键为右括号，值为相同类型的左括号。</p><p>在遍历结束后，如果栈中没有左括号，说明我们将字符串 ss 中的所有左括号闭合，返回 <code>True</code>，否则返回 <code>False</code>。</p><p>注意到有效字符串的长度一定为偶数，因此如果字符串的长度为奇数，我们可以直接返回 <code>False</code>，省去后续的遍历判断过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">char</span>&gt; pairs = &#123;</span><br><span class="line">                &#123;<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch: s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pairs.<span class="built_in">count</span>(ch)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>() != pairs[ch]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><p><strong><em><u>主要的不同就是利用了哈希表存储了每一种括号</u></em></strong></p><h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="[21]合并两个有序链表"></a>[21]合并两个有序链表</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例 1：</strong></p><p> <img src="https://cdn.jsdelivr.net/gh/Heart-666/BlogPicGoImg/img/21.合并两个有序链表.png" alt="合并两个有序链表"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><h3 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">mergeTwoLists</span><span class="params">(ListNode *l1, ListNode *l2)</span> </span>&#123;</span><br><span class="line">        ListNode *preHead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">        ListNode *prev = preHead;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">nullptr</span> &amp;&amp; l2 != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1-&gt;val &lt; l2-&gt;val) &#123;<span class="comment">//l1节点的值小于l2的节点的值</span></span><br><span class="line">                prev-&gt;next = l1;<span class="comment">//接上l1</span></span><br><span class="line">                l1 = l1-&gt;next;<span class="comment">//l1向后移动</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev-&gt;next = l2;<span class="comment">//接上l2</span></span><br><span class="line">                l2 = l2-&gt;next;<span class="comment">//l2向后移动</span></span><br><span class="line">            &#125;</span><br><span class="line">            prev = prev-&gt;next;<span class="comment">//指向这个链表的后一个位置，也就是需要返回的链表的最后一个位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可</span></span><br><span class="line">        prev-&gt;next = l1 == <span class="literal">nullptr</span> ? l2 : l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> preHead-&gt;next;<span class="comment">//返回头节点的后一个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题主要就是将两个有序非递减链表链表进行合并，所以我们需要将两个链表的每一个元素进行比较，由于比较特殊的是两个链表的元素是非递减的，所以我们需要利用这个特点将两个链表遍历一遍就可以将两个链表进行合并就可以了，下面描述的就是主要的思路。</p><p>我们可以建立一个头节点<font color='red'>（后面只需要返回头节点的下一个元素就可以）</font>，然后同时遍历<font color='blue'>list1</font>和<font color='blue'>list2</font>，每次都判断比较当前指向的元素的大小，将小的元素接到 <code>prev</code> 链表后面，需要注意的是，我们需要每次将 <code>prev</code> 指针向后移动，否则就只会接上一个元素。操作完之后由于可能会有某个链表先遍历完了，另一个链表还没有遍历完，我们只需要将剩下的链表接到 <code>prev</code> 后面就可以了<font color='red'>（一定只会有有一个链表可能没有遍历完，while判断是只要一个遍历完就出循环）</font>。</p><p><u><font color='green'><strong>LeetCode题解类似就不做介绍了</strong></font></u></p><h2 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="[26]删除有序数组中的重复项"></a>[26]删除有序数组中的重复项</h2><p>给你一个<strong>升序排列</strong> 的数组<code>nums</code> ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的<strong>相对顺序</strong>应该保持<strong>一致</strong>。</p><p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么<code>nums</code> 的前<code>k</code>个元素应该保存最终结果。</p><p>将最终结果插入 <code>nums</code> 的前 <code>k</code>个位置后返回<code>k</code> 。</p><p>不要使用额外的空间，你必须在 <code>原地</code> <strong>修改输入数组</strong>并在使用 <code>O(1)</code> 额外空间的条件下完成。</p><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>$0 &lt;= nums.length &lt;= 3 * 10^4$</li><li>$-10^4 &lt;= nums[i] &lt;= 10^4$</li><li><code>nums</code> 已按 <strong>升序</strong> 排列</li></ul><h3 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a><strong>题解：</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) &#123;<span class="comment">//nums数组长度小于等于1</span></span><br><span class="line">            <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;<span class="comment">//返回的k值</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//指向需要判断的元素</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[index]) &#123;<span class="comment">//当前指向的元素大于index下标的元素怒</span></span><br><span class="line">                nums[index + <span class="number">1</span>] = nums[i];<span class="comment">//交换index下标前一个元素</span></span><br><span class="line">                i++;<span class="comment">//向后移动</span></span><br><span class="line">                index++;<span class="comment">//需要返回的长度对应的下标加1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则，只需要移动i指针</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index + <span class="number">1</span>;<span class="comment">//因为是长度所以是下标加1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a><strong><em>思路：</em></strong></h3><p>这题主要就是给你一个数组，然后判断返回数组中不重复的元素，一开始拿到题目那肯定就是直接两层循环来交换元素将不重复的元素放到前面，但是由于本题的特殊性<strong>有序</strong>，所以我们可以有另外一种想法，直接一层 <code>while</code> 就可以将数组中的元素换位。</p><p>主要的思路就是先判断数组的长度，如果小于等于 <code>1</code>，那么就一定不重复，直接返回数组的长度。如果不是长度不是<code>`1</code>，那么我们就可以定义一个 <code>i</code> 指针来判断元素是否<strong>重复</strong>，定义一个 <code>index</code> 来记录当前不重复的元素到某个位置截至。遍历数组，利用数组是递增有序的特点，我们不需要考虑数组里面的元素是否相等，只要判断 <code>i</code> 指针指向的元素是否大于 <code>index</code> 指针指向的元素，如果大于就将 <code>index</code> 指向的下一个元素的值设置成 <code>i</code> 指针指向的值，<code>i</code> 指针向后移动和 <code>index</code> 指针向后移动。将 <code>index</code> 指针后一个赋值的意思就是我们发现了一个新的可以返回的元素，所以我们需要将其放到前面去，不交换是因为后面的元素我们完全不需要保留，所以直接<strong>赋值</strong>。如果小于等于 <code>index</code> 指向的元素的值，我们就直接移动<code>i</code>指针就可以了。</p><h3 id="LeetCode题解-3"><a href="#LeetCode题解-3" class="headerlink" title="LeetCode题解"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-tudo/"><strong>LeetCode题解</strong></a></h3><h4 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h4><p>这道题目的要求是：对给定的有序数组 <code>nums</code> 删除重复元素，在删除重复元素之后，每个元素只出现一次，并返回新的长度，上述操作必须通过原地修改数组的方法，使用 <code>O(1)</code> 的空间复杂度完成。</p><p>由于给定的数组 <code>nums</code> 是有序的，因此对于任意 <code>i&lt;j</code>，如果<code>nums[i]=nums[j]</code>，则对任意 <code>i≤k≤j</code>，必有 <code>nums[i]=nums[k]=nums[j]</code> ，即相等的元素在数组中的下标一定是连续的。利用数组有序的特点，可以通过双指针的方法删除重复元素。</p><p>如果数组 <code>nums</code> 的长度为 <code>0</code>，则数组不包含任何元素，因此返回 <code>0</code>。</p><p>当数组 <code>nums</code> 的长度大于 <code>0</code> 时，数组中至少包含一个元素，在删除重复元素之后也至少剩下一个元素，因此 <code>nums[0]</code> 保持原状即可，从下标 <code>1</code> 开始删除重复元素。</p><p>定义两个指针 <code>fast</code> 和 <code>slow</code> 分别为快指针和慢指针，快指针表示遍历数组到达的下标位置，慢指针表示下一个不同元素要填入的下标位置，初始时两个指针都指向下标 <code>1</code>。</p><p>假设数组 <code>nums</code> 的长度为 <code>n</code>。将快指针 <code>fast</code> 依次遍历从 <code>1</code> 到 <code>n−1</code> 的每个位置，对于每个位置，如果 <code>nums[fast]≠nums[fast−1]</code>，说明 <code>nums[fast]</code> 和之前的元素都不同，因此将 <code>nums[fast]</code> 的值复制到 <code>nums[slow]</code> ，然后将 <code>slow</code> 的值加 <code>1</code>，即指向下一个位置。</p><p>遍历结束之后，从 <code>nums[0]</code> 到 <code>nums[slow−1]</code> 的每个元素都不相同且包含原数组中的每个不同的元素，因此新的长度即为 <code>slow</code>，返回  <code>slow</code> 即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> fast = <span class="number">1</span>, slow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[fast] != nums[fast - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：LeetCode-Solution</span><br></pre></td></tr></table></figure><p><strong><em><u>思路和我的基本一致，就不作介绍了</u></em></strong></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;在这一周的学习过程中，主要的就是对数组，链表，字符串进行操作。考察的主要就是交换元素，判断元素，数字的反转<font color='red'>（这是我认为学习到了一个完全的新的知识）</font>，同时在这次的学习过程中，发现了一点就是需要发现题目的特点，有时候利用题目的特点，可以大大提高我们算法的效率，总的来说，这个星期的学习也算是对算法的一个基本学习吧，让自己对算法有着更好的了解。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
